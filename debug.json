[
	{
		"TFDNode": {
			"appliedAction": null,
			"problem": {
				"StackTraceElement": {
					"remainingTasks": [
						"1_tResolveMLPipeline(request, solution)"
					],
					"state": [
						"iface(searcher)",
						"iface(AbstractClassifier)",
						"iface(weka.attributeSelection.AttributeSelection)",
						"iface(weka.classifiers.functions.SMO)",
						"iface(AbstractPreprocessor)",
						"iface(weka.attributeSelection.SymmetricalUncertAttributeEval)",
						"iface(weka.classifiers.functions.MultilayerPerceptron)",
						"iface(evaluator)",
						"iface(MLPipeline)",
						"iface(weka.attributeSelection.Ranker)",
						"iface(weka.classifiers.bayes.NaiveBayes)",
						"component(request)"
					]
				}
			},
			"appliedMethodInstance": null,
			"isGoal": false
		}
	},
	{
		"TFDNode": {
			"appliedAction": null,
			"problem": {
				"StackTraceElement": {
					"remainingTasks": [
						"1_satisfyMLPipelineWithMLPipeline(request, solution, newVar1, newVar2)",
						"1_tResolveAbstractPreprocessor(solution, newVar1)",
						"1_tResolveAbstractClassifier(solution, newVar2)",
						"2_tRefineParamsOfMLPipeline(request, solution)"
					],
					"state": [
						"iface(searcher)",
						"iface(AbstractClassifier)",
						"iface(weka.attributeSelection.AttributeSelection)",
						"iface(weka.classifiers.functions.SMO)",
						"iface(AbstractPreprocessor)",
						"iface(weka.attributeSelection.SymmetricalUncertAttributeEval)",
						"iface(weka.classifiers.functions.MultilayerPerceptron)",
						"iface(evaluator)",
						"iface(MLPipeline)",
						"iface(weka.attributeSelection.Ranker)",
						"iface(weka.classifiers.bayes.NaiveBayes)",
						"component(request)"
					]
				}
			},
			"appliedMethodInstance": {
				"MethodInstance": {
					"method": "OCIPMethod [Method [name=resolveMLPipelineWithMLPipeline, parameters=[<c1:undefined>, <c2:undefined>, <sc1:undefined>, <sc2:undefined>], task=1_tResolveMLPipeline(<c1:undefined>, <c2:undefined>), precondition={\"Monom\":{\"literals\":[\"component(<c1:undefined>)\"]}}, network=jaicore.planning.hierarchical.problems.stn.TaskNetwork@b449b166, lonely=false], evaluablePrecondition={\"Monom\":{\"literals\":[]}}]",
					"precondition": [
						"component(request)"
					],
					"grounding": {
						"<sc2:undefined>": "newVar2",
						"<sc1:undefined>": "newVar1",
						"<c1:undefined>": "request",
						"<c2:undefined>": "solution"
					}
				}
			},
			"isGoal": false
		}
	},
	{
		"TFDNode": {
			"appliedAction": {
				"StackTraceElement": {
					"operation": "CEOCOperation [name=1_satisfyMLPipelineWithMLPipeline, params=[<c1:undefined>, <c2:undefined>, <sc1:undefined>, <sc2:undefined>], outputs=[], precondition={\"Monom\":{\"literals\":[\"component(<c1:undefined>)\"]}}, addlists={[]={\"Monom\":{\"literals\":[\"component(<c2:undefined>)\",\"interfaceIdentifier(MLPipeline, classifier, <c2:undefined>, <sc2:undefined>)\",\"interfaceIdentifier(MLPipeline, pp_0, <c2:undefined>, <sc1:undefined>)\",\"resolves(<c1:undefined>, MLPipeline, MLPipeline, <c2:undefined>)\"]}}}, dellists={}]",
					"grounding": {
						"<sc2:undefined>": "newVar2",
						"<sc1:undefined>": "newVar1",
						"<c1:undefined>": "request",
						"<c2:undefined>": "solution"
					}
				}
			},
			"problem": {
				"StackTraceElement": {
					"remainingTasks": [
						"1_tResolveAbstractPreprocessor(solution, newVar1)",
						"1_tResolveAbstractClassifier(solution, newVar2)",
						"2_tRefineParamsOfMLPipeline(request, solution)"
					],
					"state": [
						"iface(searcher)",
						"iface(weka.classifiers.functions.SMO)",
						"iface(AbstractPreprocessor)",
						"iface(weka.classifiers.functions.MultilayerPerceptron)",
						"interfaceIdentifier(MLPipeline, classifier, solution, newVar2)",
						"iface(MLPipeline)",
						"component(solution)",
						"def(newVar1)",
						"iface(weka.classifiers.bayes.NaiveBayes)",
						"component(request)",
						"def(newVar2)",
						"iface(AbstractClassifier)",
						"iface(weka.attributeSelection.AttributeSelection)",
						"iface(weka.attributeSelection.SymmetricalUncertAttributeEval)",
						"resolves(request, MLPipeline, MLPipeline, solution)",
						"interfaceIdentifier(MLPipeline, pp_0, solution, newVar1)",
						"iface(evaluator)",
						"iface(weka.attributeSelection.Ranker)"
					]
				}
			},
			"appliedMethodInstance": null,
			"isGoal": false
		}
	},
	{
		"TFDNode": {
			"appliedAction": null,
			"problem": {
				"StackTraceElement": {
					"remainingTasks": [
						"1_satisfyAbstractPreprocessorWithweka.attributeSelection.AttributeSelection(solution, newVar1, newVar3, newVar4)",
						"1_tResolveevaluator(newVar1, newVar3)",
						"1_tResolvesearcher(newVar1, newVar4)",
						"1_tResolveAbstractClassifier(solution, newVar2)",
						"2_tRefineParamsOfweka.attributeSelection.AttributeSelection(solution, newVar1)",
						"2_tRefineParamsOfMLPipeline(request, solution)"
					],
					"state": [
						"iface(searcher)",
						"iface(weka.classifiers.functions.SMO)",
						"iface(AbstractPreprocessor)",
						"iface(weka.classifiers.functions.MultilayerPerceptron)",
						"interfaceIdentifier(MLPipeline, classifier, solution, newVar2)",
						"iface(MLPipeline)",
						"component(solution)",
						"def(newVar1)",
						"iface(weka.classifiers.bayes.NaiveBayes)",
						"component(request)",
						"def(newVar2)",
						"iface(AbstractClassifier)",
						"iface(weka.attributeSelection.AttributeSelection)",
						"iface(weka.attributeSelection.SymmetricalUncertAttributeEval)",
						"resolves(request, MLPipeline, MLPipeline, solution)",
						"interfaceIdentifier(MLPipeline, pp_0, solution, newVar1)",
						"iface(evaluator)",
						"iface(weka.attributeSelection.Ranker)"
					]
				}
			},
			"appliedMethodInstance": {
				"MethodInstance": {
					"method": "OCIPMethod [Method [name=resolveAbstractPreprocessorWithweka.attributeSelection.AttributeSelection, parameters=[<c1:undefined>, <c2:undefined>, <sc1:undefined>, <sc2:undefined>], task=1_tResolveAbstractPreprocessor(<c1:undefined>, <c2:undefined>), precondition={\"Monom\":{\"literals\":[\"component(<c1:undefined>)\"]}}, network=jaicore.planning.hierarchical.problems.stn.TaskNetwork@c324ec80, lonely=false], evaluablePrecondition={\"Monom\":{\"literals\":[]}}]",
					"precondition": [
						"component(solution)"
					],
					"grounding": {
						"<sc2:undefined>": "newVar4",
						"<sc1:undefined>": "newVar3",
						"<c1:undefined>": "solution",
						"<c2:undefined>": "newVar1"
					}
				}
			},
			"isGoal": false
		}
	},
	{
		"TFDNode": {
			"appliedAction": {
				"StackTraceElement": {
					"operation": "CEOCOperation [name=1_satisfyAbstractPreprocessorWithweka.attributeSelection.AttributeSelection, params=[<c1:undefined>, <c2:undefined>, <sc1:undefined>, <sc2:undefined>], outputs=[], precondition={\"Monom\":{\"literals\":[\"component(<c1:undefined>)\"]}}, addlists={[]={\"Monom\":{\"literals\":[\"component(<c2:undefined>)\",\"resolves(<c1:undefined>, AbstractPreprocessor, weka.attributeSelection.AttributeSelection, <c2:undefined>)\",\"interfaceIdentifier(weka.attributeSelection.AttributeSelection, searcher, <c2:undefined>, <sc2:undefined>)\",\"interfaceIdentifier(weka.attributeSelection.AttributeSelection, evaluator, <c2:undefined>, <sc1:undefined>)\"]}}}, dellists={}]",
					"grounding": {
						"<sc2:undefined>": "newVar4",
						"<sc1:undefined>": "newVar3",
						"<c1:undefined>": "solution",
						"<c2:undefined>": "newVar1"
					}
				}
			},
			"problem": {
				"StackTraceElement": {
					"remainingTasks": [
						"1_tResolveevaluator(newVar1, newVar3)",
						"1_tResolvesearcher(newVar1, newVar4)",
						"1_tResolveAbstractClassifier(solution, newVar2)",
						"2_tRefineParamsOfweka.attributeSelection.AttributeSelection(solution, newVar1)",
						"2_tRefineParamsOfMLPipeline(request, solution)"
					],
					"state": [
						"iface(searcher)",
						"iface(weka.classifiers.functions.SMO)",
						"iface(AbstractPreprocessor)",
						"iface(weka.classifiers.functions.MultilayerPerceptron)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, searcher, newVar1, newVar4)",
						"interfaceIdentifier(MLPipeline, classifier, solution, newVar2)",
						"def(newVar4)",
						"iface(MLPipeline)",
						"component(solution)",
						"def(newVar1)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, evaluator, newVar1, newVar3)",
						"iface(weka.classifiers.bayes.NaiveBayes)",
						"def(newVar3)",
						"component(request)",
						"def(newVar2)",
						"iface(AbstractClassifier)",
						"iface(weka.attributeSelection.AttributeSelection)",
						"iface(weka.attributeSelection.SymmetricalUncertAttributeEval)",
						"resolves(request, MLPipeline, MLPipeline, solution)",
						"component(newVar1)",
						"interfaceIdentifier(MLPipeline, pp_0, solution, newVar1)",
						"iface(evaluator)",
						"resolves(solution, AbstractPreprocessor, weka.attributeSelection.AttributeSelection, newVar1)",
						"iface(weka.attributeSelection.Ranker)"
					]
				}
			},
			"appliedMethodInstance": null,
			"isGoal": false
		}
	},
	{
		"TFDNode": {
			"appliedAction": null,
			"problem": {
				"StackTraceElement": {
					"remainingTasks": [
						"1_satisfyevaluatorWithweka.attributeSelection.SymmetricalUncertAttributeEval(newVar1, newVar3)",
						"1_tResolvesearcher(newVar1, newVar4)",
						"1_tResolveAbstractClassifier(solution, newVar2)",
						"2_tRefineParamsOfweka.attributeSelection.SymmetricalUncertAttributeEval(newVar1, newVar3)",
						"2_tRefineParamsOfweka.attributeSelection.AttributeSelection(solution, newVar1)",
						"2_tRefineParamsOfMLPipeline(request, solution)"
					],
					"state": [
						"iface(searcher)",
						"iface(weka.classifiers.functions.SMO)",
						"iface(AbstractPreprocessor)",
						"iface(weka.classifiers.functions.MultilayerPerceptron)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, searcher, newVar1, newVar4)",
						"interfaceIdentifier(MLPipeline, classifier, solution, newVar2)",
						"def(newVar4)",
						"iface(MLPipeline)",
						"component(solution)",
						"def(newVar1)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, evaluator, newVar1, newVar3)",
						"iface(weka.classifiers.bayes.NaiveBayes)",
						"def(newVar3)",
						"component(request)",
						"def(newVar2)",
						"iface(AbstractClassifier)",
						"iface(weka.attributeSelection.AttributeSelection)",
						"iface(weka.attributeSelection.SymmetricalUncertAttributeEval)",
						"resolves(request, MLPipeline, MLPipeline, solution)",
						"component(newVar1)",
						"interfaceIdentifier(MLPipeline, pp_0, solution, newVar1)",
						"iface(evaluator)",
						"resolves(solution, AbstractPreprocessor, weka.attributeSelection.AttributeSelection, newVar1)",
						"iface(weka.attributeSelection.Ranker)"
					]
				}
			},
			"appliedMethodInstance": {
				"MethodInstance": {
					"method": "OCIPMethod [Method [name=resolveevaluatorWithweka.attributeSelection.SymmetricalUncertAttributeEval, parameters=[<c1:undefined>, <c2:undefined>], task=1_tResolveevaluator(<c1:undefined>, <c2:undefined>), precondition={\"Monom\":{\"literals\":[\"component(<c1:undefined>)\"]}}, network=jaicore.planning.hierarchical.problems.stn.TaskNetwork@f410aea8, lonely=false], evaluablePrecondition={\"Monom\":{\"literals\":[]}}]",
					"precondition": [
						"component(newVar1)"
					],
					"grounding": {
						"<c1:undefined>": "newVar1",
						"<c2:undefined>": "newVar3"
					}
				}
			},
			"isGoal": false
		}
	},
	{
		"TFDNode": {
			"appliedAction": {
				"StackTraceElement": {
					"operation": "CEOCOperation [name=1_satisfyevaluatorWithweka.attributeSelection.SymmetricalUncertAttributeEval, params=[<c1:undefined>, <c2:undefined>], outputs=[], precondition={\"Monom\":{\"literals\":[\"component(<c1:undefined>)\"]}}, addlists={[]={\"Monom\":{\"literals\":[\"component(<c2:undefined>)\",\"resolves(<c1:undefined>, evaluator, weka.attributeSelection.SymmetricalUncertAttributeEval, <c2:undefined>)\"]}}}, dellists={}]",
					"grounding": {
						"<c1:undefined>": "newVar1",
						"<c2:undefined>": "newVar3"
					}
				}
			},
			"problem": {
				"StackTraceElement": {
					"remainingTasks": [
						"1_tResolvesearcher(newVar1, newVar4)",
						"1_tResolveAbstractClassifier(solution, newVar2)",
						"2_tRefineParamsOfweka.attributeSelection.SymmetricalUncertAttributeEval(newVar1, newVar3)",
						"2_tRefineParamsOfweka.attributeSelection.AttributeSelection(solution, newVar1)",
						"2_tRefineParamsOfMLPipeline(request, solution)"
					],
					"state": [
						"iface(weka.classifiers.functions.SMO)",
						"iface(weka.classifiers.functions.MultilayerPerceptron)",
						"interfaceIdentifier(MLPipeline, classifier, solution, newVar2)",
						"iface(MLPipeline)",
						"resolves(newVar1, evaluator, weka.attributeSelection.SymmetricalUncertAttributeEval, newVar3)",
						"def(newVar1)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, evaluator, newVar1, newVar3)",
						"def(newVar3)",
						"component(request)",
						"iface(AbstractClassifier)",
						"iface(weka.attributeSelection.AttributeSelection)",
						"iface(weka.attributeSelection.SymmetricalUncertAttributeEval)",
						"interfaceIdentifier(MLPipeline, pp_0, solution, newVar1)",
						"iface(evaluator)",
						"resolves(solution, AbstractPreprocessor, weka.attributeSelection.AttributeSelection, newVar1)",
						"iface(weka.attributeSelection.Ranker)",
						"iface(searcher)",
						"iface(AbstractPreprocessor)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, searcher, newVar1, newVar4)",
						"def(newVar4)",
						"component(solution)",
						"iface(weka.classifiers.bayes.NaiveBayes)",
						"def(newVar2)",
						"component(newVar3)",
						"resolves(request, MLPipeline, MLPipeline, solution)",
						"component(newVar1)"
					]
				}
			},
			"appliedMethodInstance": null,
			"isGoal": false
		}
	},
	{
		"TFDNode": {
			"appliedAction": null,
			"problem": {
				"StackTraceElement": {
					"remainingTasks": [
						"1_satisfysearcherWithweka.attributeSelection.Ranker(newVar1, newVar4)",
						"1_tResolveAbstractClassifier(solution, newVar2)",
						"2_tRefineParamsOfweka.attributeSelection.Ranker(newVar1, newVar4)",
						"2_tRefineParamsOfweka.attributeSelection.SymmetricalUncertAttributeEval(newVar1, newVar3)",
						"2_tRefineParamsOfweka.attributeSelection.AttributeSelection(solution, newVar1)",
						"2_tRefineParamsOfMLPipeline(request, solution)"
					],
					"state": [
						"iface(weka.classifiers.functions.SMO)",
						"iface(weka.classifiers.functions.MultilayerPerceptron)",
						"interfaceIdentifier(MLPipeline, classifier, solution, newVar2)",
						"iface(MLPipeline)",
						"resolves(newVar1, evaluator, weka.attributeSelection.SymmetricalUncertAttributeEval, newVar3)",
						"def(newVar1)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, evaluator, newVar1, newVar3)",
						"def(newVar3)",
						"component(request)",
						"iface(AbstractClassifier)",
						"iface(weka.attributeSelection.AttributeSelection)",
						"iface(weka.attributeSelection.SymmetricalUncertAttributeEval)",
						"interfaceIdentifier(MLPipeline, pp_0, solution, newVar1)",
						"iface(evaluator)",
						"resolves(solution, AbstractPreprocessor, weka.attributeSelection.AttributeSelection, newVar1)",
						"iface(weka.attributeSelection.Ranker)",
						"iface(searcher)",
						"iface(AbstractPreprocessor)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, searcher, newVar1, newVar4)",
						"def(newVar4)",
						"component(solution)",
						"iface(weka.classifiers.bayes.NaiveBayes)",
						"def(newVar2)",
						"component(newVar3)",
						"resolves(request, MLPipeline, MLPipeline, solution)",
						"component(newVar1)"
					]
				}
			},
			"appliedMethodInstance": {
				"MethodInstance": {
					"method": "OCIPMethod [Method [name=resolvesearcherWithweka.attributeSelection.Ranker, parameters=[<c1:undefined>, <c2:undefined>], task=1_tResolvesearcher(<c1:undefined>, <c2:undefined>), precondition={\"Monom\":{\"literals\":[\"component(<c1:undefined>)\"]}}, network=jaicore.planning.hierarchical.problems.stn.TaskNetwork@c9947b58, lonely=false], evaluablePrecondition={\"Monom\":{\"literals\":[]}}]",
					"precondition": [
						"component(newVar1)"
					],
					"grounding": {
						"<c1:undefined>": "newVar1",
						"<c2:undefined>": "newVar4"
					}
				}
			},
			"isGoal": false
		}
	},
	{
		"TFDNode": {
			"appliedAction": {
				"StackTraceElement": {
					"operation": "CEOCOperation [name=1_satisfysearcherWithweka.attributeSelection.Ranker, params=[<c1:undefined>, <c2:undefined>], outputs=[], precondition={\"Monom\":{\"literals\":[\"component(<c1:undefined>)\"]}}, addlists={[]={\"Monom\":{\"literals\":[\"component(<c2:undefined>)\",\"resolves(<c1:undefined>, searcher, weka.attributeSelection.Ranker, <c2:undefined>)\"]}}}, dellists={}]",
					"grounding": {
						"<c1:undefined>": "newVar1",
						"<c2:undefined>": "newVar4"
					}
				}
			},
			"problem": {
				"StackTraceElement": {
					"remainingTasks": [
						"1_tResolveAbstractClassifier(solution, newVar2)",
						"2_tRefineParamsOfweka.attributeSelection.Ranker(newVar1, newVar4)",
						"2_tRefineParamsOfweka.attributeSelection.SymmetricalUncertAttributeEval(newVar1, newVar3)",
						"2_tRefineParamsOfweka.attributeSelection.AttributeSelection(solution, newVar1)",
						"2_tRefineParamsOfMLPipeline(request, solution)"
					],
					"state": [
						"iface(weka.classifiers.functions.SMO)",
						"iface(weka.classifiers.functions.MultilayerPerceptron)",
						"interfaceIdentifier(MLPipeline, classifier, solution, newVar2)",
						"iface(MLPipeline)",
						"resolves(newVar1, evaluator, weka.attributeSelection.SymmetricalUncertAttributeEval, newVar3)",
						"def(newVar1)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, evaluator, newVar1, newVar3)",
						"def(newVar3)",
						"component(request)",
						"iface(AbstractClassifier)",
						"iface(weka.attributeSelection.AttributeSelection)",
						"component(newVar4)",
						"iface(weka.attributeSelection.SymmetricalUncertAttributeEval)",
						"interfaceIdentifier(MLPipeline, pp_0, solution, newVar1)",
						"iface(evaluator)",
						"resolves(solution, AbstractPreprocessor, weka.attributeSelection.AttributeSelection, newVar1)",
						"iface(weka.attributeSelection.Ranker)",
						"iface(searcher)",
						"iface(AbstractPreprocessor)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, searcher, newVar1, newVar4)",
						"def(newVar4)",
						"component(solution)",
						"iface(weka.classifiers.bayes.NaiveBayes)",
						"def(newVar2)",
						"component(newVar3)",
						"resolves(request, MLPipeline, MLPipeline, solution)",
						"resolves(newVar1, searcher, weka.attributeSelection.Ranker, newVar4)",
						"component(newVar1)"
					]
				}
			},
			"appliedMethodInstance": null,
			"isGoal": false
		}
	},
	{
		"TFDNode": {
			"appliedAction": null,
			"problem": {
				"StackTraceElement": {
					"remainingTasks": [
						"1_satisfyAbstractClassifierWithweka.classifiers.functions.MultilayerPerceptron(solution, newVar2)",
						"2_tRefineParamsOfweka.classifiers.functions.MultilayerPerceptron(solution, newVar2)",
						"2_tRefineParamsOfweka.attributeSelection.Ranker(newVar1, newVar4)",
						"2_tRefineParamsOfweka.attributeSelection.SymmetricalUncertAttributeEval(newVar1, newVar3)",
						"2_tRefineParamsOfweka.attributeSelection.AttributeSelection(solution, newVar1)",
						"2_tRefineParamsOfMLPipeline(request, solution)"
					],
					"state": [
						"iface(weka.classifiers.functions.SMO)",
						"iface(weka.classifiers.functions.MultilayerPerceptron)",
						"interfaceIdentifier(MLPipeline, classifier, solution, newVar2)",
						"iface(MLPipeline)",
						"resolves(newVar1, evaluator, weka.attributeSelection.SymmetricalUncertAttributeEval, newVar3)",
						"def(newVar1)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, evaluator, newVar1, newVar3)",
						"def(newVar3)",
						"component(request)",
						"iface(AbstractClassifier)",
						"iface(weka.attributeSelection.AttributeSelection)",
						"component(newVar4)",
						"iface(weka.attributeSelection.SymmetricalUncertAttributeEval)",
						"interfaceIdentifier(MLPipeline, pp_0, solution, newVar1)",
						"iface(evaluator)",
						"resolves(solution, AbstractPreprocessor, weka.attributeSelection.AttributeSelection, newVar1)",
						"iface(weka.attributeSelection.Ranker)",
						"iface(searcher)",
						"iface(AbstractPreprocessor)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, searcher, newVar1, newVar4)",
						"def(newVar4)",
						"component(solution)",
						"iface(weka.classifiers.bayes.NaiveBayes)",
						"def(newVar2)",
						"component(newVar3)",
						"resolves(request, MLPipeline, MLPipeline, solution)",
						"resolves(newVar1, searcher, weka.attributeSelection.Ranker, newVar4)",
						"component(newVar1)"
					]
				}
			},
			"appliedMethodInstance": {
				"MethodInstance": {
					"method": "OCIPMethod [Method [name=resolveAbstractClassifierWithweka.classifiers.functions.MultilayerPerceptron, parameters=[<c1:undefined>, <c2:undefined>], task=1_tResolveAbstractClassifier(<c1:undefined>, <c2:undefined>), precondition={\"Monom\":{\"literals\":[\"component(<c1:undefined>)\"]}}, network=jaicore.planning.hierarchical.problems.stn.TaskNetwork@72f1552c, lonely=false], evaluablePrecondition={\"Monom\":{\"literals\":[]}}]",
					"precondition": [
						"component(solution)"
					],
					"grounding": {
						"<c1:undefined>": "solution",
						"<c2:undefined>": "newVar2"
					}
				}
			},
			"isGoal": false
		}
	},
	{
		"TFDNode": {
			"appliedAction": {
				"StackTraceElement": {
					"operation": "CEOCOperation [name=1_satisfyAbstractClassifierWithweka.classifiers.functions.MultilayerPerceptron, params=[<c1:undefined>, <c2:undefined>], outputs=[], precondition={\"Monom\":{\"literals\":[\"component(<c1:undefined>)\"]}}, addlists={[]={\"Monom\":{\"literals\":[\"component(<c2:undefined>)\",\"resolves(<c1:undefined>, AbstractClassifier, weka.classifiers.functions.MultilayerPerceptron, <c2:undefined>)\"]}}}, dellists={}]",
					"grounding": {
						"<c1:undefined>": "solution",
						"<c2:undefined>": "newVar2"
					}
				}
			},
			"problem": {
				"StackTraceElement": {
					"remainingTasks": [
						"2_tRefineParamsOfweka.classifiers.functions.MultilayerPerceptron(solution, newVar2)",
						"2_tRefineParamsOfweka.attributeSelection.Ranker(newVar1, newVar4)",
						"2_tRefineParamsOfweka.attributeSelection.SymmetricalUncertAttributeEval(newVar1, newVar3)",
						"2_tRefineParamsOfweka.attributeSelection.AttributeSelection(solution, newVar1)",
						"2_tRefineParamsOfMLPipeline(request, solution)"
					],
					"state": [
						"iface(weka.classifiers.functions.SMO)",
						"iface(weka.classifiers.functions.MultilayerPerceptron)",
						"interfaceIdentifier(MLPipeline, classifier, solution, newVar2)",
						"iface(MLPipeline)",
						"resolves(newVar1, evaluator, weka.attributeSelection.SymmetricalUncertAttributeEval, newVar3)",
						"def(newVar1)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, evaluator, newVar1, newVar3)",
						"def(newVar3)",
						"component(request)",
						"resolves(solution, AbstractClassifier, weka.classifiers.functions.MultilayerPerceptron, newVar2)",
						"iface(AbstractClassifier)",
						"iface(weka.attributeSelection.AttributeSelection)",
						"component(newVar4)",
						"iface(weka.attributeSelection.SymmetricalUncertAttributeEval)",
						"component(newVar2)",
						"interfaceIdentifier(MLPipeline, pp_0, solution, newVar1)",
						"iface(evaluator)",
						"resolves(solution, AbstractPreprocessor, weka.attributeSelection.AttributeSelection, newVar1)",
						"iface(weka.attributeSelection.Ranker)",
						"iface(searcher)",
						"iface(AbstractPreprocessor)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, searcher, newVar1, newVar4)",
						"def(newVar4)",
						"component(solution)",
						"iface(weka.classifiers.bayes.NaiveBayes)",
						"def(newVar2)",
						"component(newVar3)",
						"resolves(request, MLPipeline, MLPipeline, solution)",
						"resolves(newVar1, searcher, weka.attributeSelection.Ranker, newVar4)",
						"component(newVar1)"
					]
				}
			},
			"appliedMethodInstance": null,
			"isGoal": false
		}
	},
	{
		"TFDNode": {
			"appliedAction": null,
			"problem": {
				"StackTraceElement": {
					"remainingTasks": [
						"2_tRefineParamsOfweka.attributeSelection.Ranker(newVar1, newVar4)",
						"2_tRefineParamsOfweka.attributeSelection.SymmetricalUncertAttributeEval(newVar1, newVar3)",
						"2_tRefineParamsOfweka.attributeSelection.AttributeSelection(solution, newVar1)",
						"2_tRefineParamsOfMLPipeline(request, solution)"
					],
					"state": [
						"iface(weka.classifiers.functions.SMO)",
						"iface(weka.classifiers.functions.MultilayerPerceptron)",
						"interfaceIdentifier(MLPipeline, classifier, solution, newVar2)",
						"iface(MLPipeline)",
						"resolves(newVar1, evaluator, weka.attributeSelection.SymmetricalUncertAttributeEval, newVar3)",
						"def(newVar1)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, evaluator, newVar1, newVar3)",
						"def(newVar3)",
						"component(request)",
						"resolves(solution, AbstractClassifier, weka.classifiers.functions.MultilayerPerceptron, newVar2)",
						"iface(AbstractClassifier)",
						"iface(weka.attributeSelection.AttributeSelection)",
						"component(newVar4)",
						"iface(weka.attributeSelection.SymmetricalUncertAttributeEval)",
						"component(newVar2)",
						"interfaceIdentifier(MLPipeline, pp_0, solution, newVar1)",
						"iface(evaluator)",
						"resolves(solution, AbstractPreprocessor, weka.attributeSelection.AttributeSelection, newVar1)",
						"iface(weka.attributeSelection.Ranker)",
						"iface(searcher)",
						"iface(AbstractPreprocessor)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, searcher, newVar1, newVar4)",
						"def(newVar4)",
						"component(solution)",
						"iface(weka.classifiers.bayes.NaiveBayes)",
						"def(newVar2)",
						"component(newVar3)",
						"resolves(request, MLPipeline, MLPipeline, solution)",
						"resolves(newVar1, searcher, weka.attributeSelection.Ranker, newVar4)",
						"component(newVar1)"
					]
				}
			},
			"appliedMethodInstance": {
				"MethodInstance": {
					"method": "OCIPMethod [Method [name=closeRefinementOfParamsOfweka.classifiers.functions.MultilayerPerceptron, parameters=[<c1:undefined>, <c2:undefined>], task=2_tRefineParamsOfweka.classifiers.functions.MultilayerPerceptron(<c1:undefined>, <c2:undefined>), precondition={\"Monom\":{\"literals\":[\"component(<c1:undefined>)\"]}}, network=jaicore.planning.hierarchical.problems.stn.TaskNetwork@1f, lonely=false], evaluablePrecondition={\"Monom\":{\"literals\":[\"refinementCompleted(weka.classifiers.functions.MultilayerPerceptron, <c2:undefined>)\"]}}]",
					"precondition": [
						"component(solution)"
					],
					"grounding": {
						"<c1:undefined>": "solution",
						"<c2:undefined>": "newVar2"
					}
				}
			},
			"isGoal": false
		}
	},
	{
		"TFDNode": {
			"appliedAction": null,
			"problem": {
				"StackTraceElement": {
					"remainingTasks": [
						"2_tRefineParamsOfweka.attributeSelection.SymmetricalUncertAttributeEval(newVar1, newVar3)",
						"2_tRefineParamsOfweka.attributeSelection.AttributeSelection(solution, newVar1)",
						"2_tRefineParamsOfMLPipeline(request, solution)"
					],
					"state": [
						"iface(weka.classifiers.functions.SMO)",
						"iface(weka.classifiers.functions.MultilayerPerceptron)",
						"interfaceIdentifier(MLPipeline, classifier, solution, newVar2)",
						"iface(MLPipeline)",
						"resolves(newVar1, evaluator, weka.attributeSelection.SymmetricalUncertAttributeEval, newVar3)",
						"def(newVar1)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, evaluator, newVar1, newVar3)",
						"def(newVar3)",
						"component(request)",
						"resolves(solution, AbstractClassifier, weka.classifiers.functions.MultilayerPerceptron, newVar2)",
						"iface(AbstractClassifier)",
						"iface(weka.attributeSelection.AttributeSelection)",
						"component(newVar4)",
						"iface(weka.attributeSelection.SymmetricalUncertAttributeEval)",
						"component(newVar2)",
						"interfaceIdentifier(MLPipeline, pp_0, solution, newVar1)",
						"iface(evaluator)",
						"resolves(solution, AbstractPreprocessor, weka.attributeSelection.AttributeSelection, newVar1)",
						"iface(weka.attributeSelection.Ranker)",
						"iface(searcher)",
						"iface(AbstractPreprocessor)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, searcher, newVar1, newVar4)",
						"def(newVar4)",
						"component(solution)",
						"iface(weka.classifiers.bayes.NaiveBayes)",
						"def(newVar2)",
						"component(newVar3)",
						"resolves(request, MLPipeline, MLPipeline, solution)",
						"resolves(newVar1, searcher, weka.attributeSelection.Ranker, newVar4)",
						"component(newVar1)"
					]
				}
			},
			"appliedMethodInstance": {
				"MethodInstance": {
					"method": "OCIPMethod [Method [name=closeRefinementOfParamsOfweka.attributeSelection.Ranker, parameters=[<c1:undefined>, <c2:undefined>], task=2_tRefineParamsOfweka.attributeSelection.Ranker(<c1:undefined>, <c2:undefined>), precondition={\"Monom\":{\"literals\":[\"component(<c1:undefined>)\"]}}, network=jaicore.planning.hierarchical.problems.stn.TaskNetwork@1f, lonely=false], evaluablePrecondition={\"Monom\":{\"literals\":[\"refinementCompleted(weka.attributeSelection.Ranker, <c2:undefined>)\"]}}]",
					"precondition": [
						"component(newVar1)"
					],
					"grounding": {
						"<c1:undefined>": "newVar1",
						"<c2:undefined>": "newVar4"
					}
				}
			},
			"isGoal": false
		}
	},
	{
		"TFDNode": {
			"appliedAction": null,
			"problem": {
				"StackTraceElement": {
					"remainingTasks": [
						"2_tRefineParamsOfweka.attributeSelection.AttributeSelection(solution, newVar1)",
						"2_tRefineParamsOfMLPipeline(request, solution)"
					],
					"state": [
						"iface(weka.classifiers.functions.SMO)",
						"iface(weka.classifiers.functions.MultilayerPerceptron)",
						"interfaceIdentifier(MLPipeline, classifier, solution, newVar2)",
						"iface(MLPipeline)",
						"resolves(newVar1, evaluator, weka.attributeSelection.SymmetricalUncertAttributeEval, newVar3)",
						"def(newVar1)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, evaluator, newVar1, newVar3)",
						"def(newVar3)",
						"component(request)",
						"resolves(solution, AbstractClassifier, weka.classifiers.functions.MultilayerPerceptron, newVar2)",
						"iface(AbstractClassifier)",
						"iface(weka.attributeSelection.AttributeSelection)",
						"component(newVar4)",
						"iface(weka.attributeSelection.SymmetricalUncertAttributeEval)",
						"component(newVar2)",
						"interfaceIdentifier(MLPipeline, pp_0, solution, newVar1)",
						"iface(evaluator)",
						"resolves(solution, AbstractPreprocessor, weka.attributeSelection.AttributeSelection, newVar1)",
						"iface(weka.attributeSelection.Ranker)",
						"iface(searcher)",
						"iface(AbstractPreprocessor)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, searcher, newVar1, newVar4)",
						"def(newVar4)",
						"component(solution)",
						"iface(weka.classifiers.bayes.NaiveBayes)",
						"def(newVar2)",
						"component(newVar3)",
						"resolves(request, MLPipeline, MLPipeline, solution)",
						"resolves(newVar1, searcher, weka.attributeSelection.Ranker, newVar4)",
						"component(newVar1)"
					]
				}
			},
			"appliedMethodInstance": {
				"MethodInstance": {
					"method": "OCIPMethod [Method [name=closeRefinementOfParamsOfweka.attributeSelection.SymmetricalUncertAttributeEval, parameters=[<c1:undefined>, <c2:undefined>], task=2_tRefineParamsOfweka.attributeSelection.SymmetricalUncertAttributeEval(<c1:undefined>, <c2:undefined>), precondition={\"Monom\":{\"literals\":[\"component(<c1:undefined>)\"]}}, network=jaicore.planning.hierarchical.problems.stn.TaskNetwork@1f, lonely=false], evaluablePrecondition={\"Monom\":{\"literals\":[\"refinementCompleted(weka.attributeSelection.SymmetricalUncertAttributeEval, <c2:undefined>)\"]}}]",
					"precondition": [
						"component(newVar1)"
					],
					"grounding": {
						"<c1:undefined>": "newVar1",
						"<c2:undefined>": "newVar3"
					}
				}
			},
			"isGoal": false
		}
	},
	{
		"TFDNode": {
			"appliedAction": null,
			"problem": {
				"StackTraceElement": {
					"remainingTasks": [
						"2_tRefineParamsOfMLPipeline(request, solution)"
					],
					"state": [
						"iface(weka.classifiers.functions.SMO)",
						"iface(weka.classifiers.functions.MultilayerPerceptron)",
						"interfaceIdentifier(MLPipeline, classifier, solution, newVar2)",
						"iface(MLPipeline)",
						"resolves(newVar1, evaluator, weka.attributeSelection.SymmetricalUncertAttributeEval, newVar3)",
						"def(newVar1)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, evaluator, newVar1, newVar3)",
						"def(newVar3)",
						"component(request)",
						"resolves(solution, AbstractClassifier, weka.classifiers.functions.MultilayerPerceptron, newVar2)",
						"iface(AbstractClassifier)",
						"iface(weka.attributeSelection.AttributeSelection)",
						"component(newVar4)",
						"iface(weka.attributeSelection.SymmetricalUncertAttributeEval)",
						"component(newVar2)",
						"interfaceIdentifier(MLPipeline, pp_0, solution, newVar1)",
						"iface(evaluator)",
						"resolves(solution, AbstractPreprocessor, weka.attributeSelection.AttributeSelection, newVar1)",
						"iface(weka.attributeSelection.Ranker)",
						"iface(searcher)",
						"iface(AbstractPreprocessor)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, searcher, newVar1, newVar4)",
						"def(newVar4)",
						"component(solution)",
						"iface(weka.classifiers.bayes.NaiveBayes)",
						"def(newVar2)",
						"component(newVar3)",
						"resolves(request, MLPipeline, MLPipeline, solution)",
						"resolves(newVar1, searcher, weka.attributeSelection.Ranker, newVar4)",
						"component(newVar1)"
					]
				}
			},
			"appliedMethodInstance": {
				"MethodInstance": {
					"method": "OCIPMethod [Method [name=closeRefinementOfParamsOfweka.attributeSelection.AttributeSelection, parameters=[<c1:undefined>, <c2:undefined>], task=2_tRefineParamsOfweka.attributeSelection.AttributeSelection(<c1:undefined>, <c2:undefined>), precondition={\"Monom\":{\"literals\":[\"component(<c1:undefined>)\"]}}, network=jaicore.planning.hierarchical.problems.stn.TaskNetwork@1f, lonely=false], evaluablePrecondition={\"Monom\":{\"literals\":[\"refinementCompleted(weka.attributeSelection.AttributeSelection, <c2:undefined>)\"]}}]",
					"precondition": [
						"component(solution)"
					],
					"grounding": {
						"<c1:undefined>": "solution",
						"<c2:undefined>": "newVar1"
					}
				}
			},
			"isGoal": false
		}
	},
	{
		"TFDNode": {
			"appliedAction": null,
			"problem": {
				"StackTraceElement": {
					"remainingTasks": [
					],
					"state": [
						"iface(weka.classifiers.functions.SMO)",
						"iface(weka.classifiers.functions.MultilayerPerceptron)",
						"interfaceIdentifier(MLPipeline, classifier, solution, newVar2)",
						"iface(MLPipeline)",
						"resolves(newVar1, evaluator, weka.attributeSelection.SymmetricalUncertAttributeEval, newVar3)",
						"def(newVar1)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, evaluator, newVar1, newVar3)",
						"def(newVar3)",
						"component(request)",
						"resolves(solution, AbstractClassifier, weka.classifiers.functions.MultilayerPerceptron, newVar2)",
						"iface(AbstractClassifier)",
						"iface(weka.attributeSelection.AttributeSelection)",
						"component(newVar4)",
						"iface(weka.attributeSelection.SymmetricalUncertAttributeEval)",
						"component(newVar2)",
						"interfaceIdentifier(MLPipeline, pp_0, solution, newVar1)",
						"iface(evaluator)",
						"resolves(solution, AbstractPreprocessor, weka.attributeSelection.AttributeSelection, newVar1)",
						"iface(weka.attributeSelection.Ranker)",
						"iface(searcher)",
						"iface(AbstractPreprocessor)",
						"interfaceIdentifier(weka.attributeSelection.AttributeSelection, searcher, newVar1, newVar4)",
						"def(newVar4)",
						"component(solution)",
						"iface(weka.classifiers.bayes.NaiveBayes)",
						"def(newVar2)",
						"component(newVar3)",
						"resolves(request, MLPipeline, MLPipeline, solution)",
						"resolves(newVar1, searcher, weka.attributeSelection.Ranker, newVar4)",
						"component(newVar1)"
					]
				}
			},
			"appliedMethodInstance": {
				"MethodInstance": {
					"method": "OCIPMethod [Method [name=closeRefinementOfParamsOfMLPipeline, parameters=[<c1:undefined>, <c2:undefined>], task=2_tRefineParamsOfMLPipeline(<c1:undefined>, <c2:undefined>), precondition={\"Monom\":{\"literals\":[\"component(<c1:undefined>)\"]}}, network=jaicore.planning.hierarchical.problems.stn.TaskNetwork@1f, lonely=false], evaluablePrecondition={\"Monom\":{\"literals\":[\"refinementCompleted(MLPipeline, <c2:undefined>)\"]}}]",
					"precondition": [
						"component(request)"
					],
					"grounding": {
						"<c1:undefined>": "request",
						"<c2:undefined>": "solution"
					}
				}
			},
			"isGoal": true
		}
	}
]
